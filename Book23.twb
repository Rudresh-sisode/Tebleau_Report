<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20193.19.1017.1259                               -->
<workbook source-build='2019.3.1 (20193.19.1017.1259)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column caption='dynamic high profit' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='110000.0'>
        <calculation class='tableau' formula='110000.0' />
      </column>
      <column caption='sheeping cost cut off' datatype='integer' datatype-customized='true' name='[Parameter 2]' param-domain-type='any' role='measure' type='quantitative' value='525'>
        <calculation class='tableau' formula='525' />
      </column>
    </datasource>
    <datasource caption='Orders (global_superstore_2016)' inline='true' name='federated.1gsjgqe08lz0s91605vrf0hsvyop' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='global_superstore_2016' name='excel-direct.14lv7840wxuwcm10wfish1y689bu'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='E:/Tableau Training/Module 2-DataSet/global_superstore_2016.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.14lv7840wxuwcm10wfish1y689bu' name='Orders' table='[Orders$]' type='table'>
          <columns gridOrigin='A1:X10001:no:A1:X10001:0' header='yes' outcome='6'>
            <column datatype='integer' name='Row ID' ordinal='0' />
            <column datatype='string' name='Order ID' ordinal='1' />
            <column datatype='date' name='Order Date' ordinal='2' />
            <column datatype='date' name='Ship Date' ordinal='3' />
            <column datatype='string' name='Ship Mode' ordinal='4' />
            <column datatype='string' name='Customer ID' ordinal='5' />
            <column datatype='string' name='Customer Name' ordinal='6' />
            <column datatype='string' name='Segment' ordinal='7' />
            <column datatype='integer' name='Postal Code' ordinal='8' />
            <column datatype='string' name='City' ordinal='9' />
            <column datatype='string' name='State' ordinal='10' />
            <column datatype='string' name='Country' ordinal='11' />
            <column datatype='string' name='Region' ordinal='12' />
            <column datatype='string' name='Market' ordinal='13' />
            <column datatype='string' name='Product ID' ordinal='14' />
            <column datatype='string' name='Category' ordinal='15' />
            <column datatype='string' name='Sub-Category' ordinal='16' />
            <column datatype='string' name='Product Name' ordinal='17' />
            <column datatype='real' name='Sales' ordinal='18' />
            <column datatype='integer' name='Quantity' ordinal='19' />
            <column datatype='real' name='Discount' ordinal='20' />
            <column datatype='real' name='Profit' ordinal='21' />
            <column datatype='real' name='Shipping Cost' ordinal='22' />
            <column datatype='string' name='Order Priority' ordinal='23' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Row ID</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Row ID]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Row ID</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order ID</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Order ID]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Order ID</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order Date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Order Date]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Order Date</remote-alias>
            <ordinal>2</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ship Date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Ship Date]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Ship Date</remote-alias>
            <ordinal>3</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ship Mode</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Ship Mode]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Ship Mode</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Customer ID</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Customer ID]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Customer ID</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Customer Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Customer Name]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Customer Name</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Segment</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Segment]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Segment</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Postal Code</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Postal Code]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Postal Code</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>City</remote-name>
            <remote-type>130</remote-type>
            <local-name>[City]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>City</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>130</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Region</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Region]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Region</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Market</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Market]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Market</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product ID</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Product ID]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Product ID</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Category</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Category]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Category</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sub-Category</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Sub-Category]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Sub-Category</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Product Name]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Product Name</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sales</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Sales]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Sales</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Quantity</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Quantity]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Quantity</remote-alias>
            <ordinal>19</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Discount</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Discount]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Discount</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Profit</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Profit]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Profit</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Shipping Cost</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Shipping Cost]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Shipping Cost</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order Priority</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Order Priority]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Order Priority</remote-alias>
            <ordinal>23</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Orders]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:X10001:no:A1:X10001:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Calculator_High' datatype='string' name='[Calculation_613334025869946881]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF  SUM([Profit])&gt;30000 THEN &quot;HIGH PROFIT&quot;&#13;&#10;ELSE &quot;LOW PROFITS&quot;&#13;&#10;END' />
      </column>
      <column caption='HighCalculator' datatype='string' name='[Calculation_613334025870675970]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF SUM([Profit])&gt;30000 THEN &quot;HIGH PROFITS&quot;&#13;&#10;ELSE &quot;LOW PROFITS&quot;&#13;&#10;END' />
      </column>
      <column caption='Threshold high profit' datatype='string' name='[Calculation_613334025878499331]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF  SUM([Profit])&gt;[Parameters].[Parameter 1] THEN &quot;above threshold&quot;&#13;&#10;ELSE &quot;below threshold&quot;&#13;&#10;END' />
      </column>
      <column caption='sheelping cost bucket' datatype='string' name='[Calculation_789255887313924097]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF AVG([Shipping Cost])&gt;[Parameters].[Parameter 2] THEN &quot;HII&quot;&#13;&#10;ELSE &quot;LOW&quot;&#13;&#10;END' />
      </column>
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Customer Name]' role='dimension' type='nominal' />
      <column datatype='real' name='[Discount]' role='measure' type='quantitative' />
      <column datatype='string' name='[Market]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[Order ID]' role='dimension' type='nominal' />
      <column datatype='integer' default-format='*00000' name='[Postal Code]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
      <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
      <column datatype='string' name='[Region]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Row ID]' role='dimension' type='ordinal' />
      <column datatype='date' name='[Ship Date]' role='dimension' type='ordinal' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='neg Profit' datatype='string' name='[Sub-Category (group)]' role='dimension' type='nominal'>
        <calculation class='categorical-bin' column='[Sub-Category]' default='&quot;Other&quot;' new-bin='true'>
          <bin default-name='true' value='&quot;Accessories, Appliances, Art and 1 more&quot;'>
            <value>&quot;Accessories&quot;</value>
            <value>&quot;Appliances&quot;</value>
            <value>&quot;Art&quot;</value>
            <value>&quot;Tables&quot;</value>
          </bin>
        </calculation>
      </column>
      <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
      <column-instance column='[Set 3]' derivation='InOut' name='[io:Set 3:nk]' pivot='key' type='nominal' />
      <column-instance column='[Ship Date]' derivation='Month' name='[mn:Ship Date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Ship Date]' derivation='Year' name='[yr:Ship Date:ok]' pivot='key' type='ordinal' />
      <group caption='Discount&gt;10' name='[Discount&gt;10]' name-style='unqualified' user:ui-builder='filter-group'>
        <groupfilter expression='AVG([Discount]) &gt; 0.10000000000000001' function='filter' user:ui-filter-by-field='true' user:ui-marker='filter-by'>
          <groupfilter function='level-members' level='[Order ID]' user:ui-enumeration='all' user:ui-marker='enumerate' />
        </groupfilter>
      </group>
      <group caption='NegativeProfitOrder' name='[NegativeProfitOrder]' name-style='unqualified' user:ui-builder='filter-group'>
        <groupfilter expression='SUM([Profit]) &lt; 0.' function='filter' user:ui-filter-by-field='true' user:ui-marker='filter-by'>
          <groupfilter function='level-members' level='[Order ID]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
        </groupfilter>
      </group>
      <group caption='Set 1' name='[Set 1]' name-style='unqualified' user:ui-builder='filter-group'>
        <groupfilter count='5' end='bottom' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
          <groupfilter direction='DESC' expression='SUM([Profit])' function='order' user:ui-marker='order'>
            <groupfilter function='level-members' level='[Customer Name]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </groupfilter>
        </groupfilter>
      </group>
      <group caption='TopFiveandBottomFive' delimiter=',' name='[Set 2]' name-style='unqualified'>
        <groupfilter function='union'>
          <groupfilter field='[Top5Customer]' function='reference' />
          <groupfilter field='[Set 1]' function='reference' />
        </groupfilter>
      </group>
      <group caption='HighDiscount' name='[Set 3]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='reorder-dimensionality'>
          <groupfilter function='union'>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[yr:Ship Date:ok]' member='2012' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Market]' member='&quot;Africa&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='1' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='3' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='4' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='7' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='8' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='9' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='10' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='11' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='12' />
                      </groupfilter>
                      <groupfilter function='member' level='[Region]' member='&quot;Western Africa&quot;' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='2' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='5' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='6' />
                      </groupfilter>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Eastern Africa&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Western Africa&quot;' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Market]' member='&quot;Asia Pacific&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[mn:Ship Date:ok]' member='1' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Oceania&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Southeastern Asia&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Western Asia&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='2' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='3' />
                      </groupfilter>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Southeastern Asia&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Western Asia&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='4' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='5' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='6' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='8' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='9' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='10' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='11' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='12' />
                      </groupfilter>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Central Asia&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Southeastern Asia&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Western Asia&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[mn:Ship Date:ok]' member='7' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Central Asia&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Oceania&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Southeastern Asia&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Western Asia&quot;' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Market]' member='&quot;Europe&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='1' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='2' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='5' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='10' />
                      </groupfilter>
                      <groupfilter function='member' level='[Region]' member='&quot;Northern Europe&quot;' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[mn:Ship Date:ok]' member='7' />
                      <groupfilter function='member' level='[Region]' member='&quot;Southern Europe&quot;' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Market]' member='&quot;LATAM&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='2' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='5' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='6' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='8' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='10' />
                      </groupfilter>
                      <groupfilter function='member' level='[Region]' member='&quot;South America&quot;' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='3' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='4' />
                      </groupfilter>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Caribbean&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;South America&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[mn:Ship Date:ok]' member='7' />
                      <groupfilter function='member' level='[Region]' member='&quot;Caribbean&quot;' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Market]' member='&quot;USCA&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='1' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='4' />
                      </groupfilter>
                      <groupfilter function='member' level='[Region]' member='&quot;Eastern US&quot;' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='2' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='5' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='6' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='7' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='8' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='10' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='11' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='12' />
                      </groupfilter>
                      <groupfilter function='member' level='[Region]' member='&quot;Central US&quot;' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='3' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='9' />
                      </groupfilter>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Central US&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Southern US&quot;' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[yr:Ship Date:ok]' member='2013' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Market]' member='&quot;Africa&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='1' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='6' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='8' />
                      </groupfilter>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Eastern Africa&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Western Africa&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='2' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='3' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='4' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='5' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='7' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='9' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='10' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='11' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='12' />
                      </groupfilter>
                      <groupfilter function='member' level='[Region]' member='&quot;Western Africa&quot;' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Market]' member='&quot;Asia Pacific&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='1' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='2' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='3' />
                      </groupfilter>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Central Asia&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Oceania&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Southeastern Asia&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Western Asia&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='4' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='6' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='10' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='11' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='12' />
                      </groupfilter>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Central Asia&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Southeastern Asia&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Western Asia&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='5' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='7' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='8' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='9' />
                      </groupfilter>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Southeastern Asia&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Western Asia&quot;' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Market]' member='&quot;Europe&quot;' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[mn:Ship Date:ok]' member='6' />
                    <groupfilter function='member' level='[Region]' member='&quot;Northern Europe&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Market]' member='&quot;LATAM&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[mn:Ship Date:ok]' member='1' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Caribbean&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;South America&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='2' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='7' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='8' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='11' />
                      </groupfilter>
                      <groupfilter function='member' level='[Region]' member='&quot;South America&quot;' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[mn:Ship Date:ok]' member='5' />
                      <groupfilter function='member' level='[Region]' member='&quot;Caribbean&quot;' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Market]' member='&quot;USCA&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[mn:Ship Date:ok]' member='1' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Central US&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Eastern US&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[mn:Ship Date:ok]' member='2' />
                      <groupfilter function='member' level='[Region]' member='&quot;Eastern US&quot;' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='3' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='4' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='6' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='8' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='9' />
                      </groupfilter>
                      <groupfilter function='member' level='[Region]' member='&quot;Central US&quot;' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='5' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='10' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='11' />
                      </groupfilter>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Central US&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Southern US&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[mn:Ship Date:ok]' member='7' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Central US&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Western US&quot;' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[yr:Ship Date:ok]' member='2014' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Market]' member='&quot;Africa&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='1' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='2' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='4' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='5' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='6' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='7' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='9' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='10' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='11' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='12' />
                      </groupfilter>
                      <groupfilter function='member' level='[Region]' member='&quot;Western Africa&quot;' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='3' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='8' />
                      </groupfilter>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Eastern Africa&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Western Africa&quot;' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Market]' member='&quot;Asia Pacific&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='1' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='2' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='3' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='5' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='6' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='9' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='11' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='12' />
                      </groupfilter>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Central Asia&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Southeastern Asia&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Western Asia&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='4' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='7' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='8' />
                      </groupfilter>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Southeastern Asia&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Western Asia&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[mn:Ship Date:ok]' member='10' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Central Asia&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Oceania&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Southeastern Asia&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Western Asia&quot;' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Market]' member='&quot;Europe&quot;' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='union'>
                      <groupfilter function='member' level='[mn:Ship Date:ok]' member='2' />
                      <groupfilter function='member' level='[mn:Ship Date:ok]' member='8' />
                      <groupfilter function='member' level='[mn:Ship Date:ok]' member='9' />
                    </groupfilter>
                    <groupfilter function='member' level='[Region]' member='&quot;Northern Europe&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Market]' member='&quot;LATAM&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='1' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='3' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='4' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='5' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='6' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='9' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='10' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='11' />
                      </groupfilter>
                      <groupfilter function='member' level='[Region]' member='&quot;South America&quot;' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[mn:Ship Date:ok]' member='2' />
                      <groupfilter function='member' level='[Region]' member='&quot;Caribbean&quot;' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Market]' member='&quot;USCA&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='2' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='3' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='4' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='6' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='7' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='9' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='11' />
                      </groupfilter>
                      <groupfilter function='member' level='[Region]' member='&quot;Central US&quot;' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='5' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='10' />
                      </groupfilter>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Central US&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Southern US&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[mn:Ship Date:ok]' member='8' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Central US&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Eastern US&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Southern US&quot;' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[yr:Ship Date:ok]' member='2015' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Market]' member='&quot;Africa&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='1' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='2' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='3' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='5' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='6' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='7' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='8' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='9' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='10' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='12' />
                      </groupfilter>
                      <groupfilter function='member' level='[Region]' member='&quot;Western Africa&quot;' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='4' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='11' />
                      </groupfilter>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Eastern Africa&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Western Africa&quot;' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Market]' member='&quot;Asia Pacific&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='1' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='5' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='8' />
                      </groupfilter>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Central Asia&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Oceania&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Southeastern Asia&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Western Asia&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='2' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='3' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='4' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='6' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='7' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='9' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='10' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='12' />
                      </groupfilter>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Central Asia&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Southeastern Asia&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Western Asia&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[mn:Ship Date:ok]' member='11' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Oceania&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Southeastern Asia&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Western Asia&quot;' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Market]' member='&quot;Europe&quot;' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='union'>
                      <groupfilter function='member' level='[mn:Ship Date:ok]' member='2' />
                      <groupfilter function='member' level='[mn:Ship Date:ok]' member='4' />
                      <groupfilter function='member' level='[mn:Ship Date:ok]' member='7' />
                      <groupfilter function='member' level='[mn:Ship Date:ok]' member='12' />
                    </groupfilter>
                    <groupfilter function='member' level='[Region]' member='&quot;Northern Europe&quot;' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Market]' member='&quot;LATAM&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='4' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='6' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='7' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='11' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='12' />
                      </groupfilter>
                      <groupfilter function='member' level='[Region]' member='&quot;South America&quot;' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[mn:Ship Date:ok]' member='8' />
                      <groupfilter function='member' level='[Region]' member='&quot;Caribbean&quot;' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Market]' member='&quot;USCA&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='1' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='4' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='8' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='10' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='11' />
                      </groupfilter>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[Region]' member='&quot;Central US&quot;' />
                        <groupfilter function='member' level='[Region]' member='&quot;Southern US&quot;' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='2' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='3' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='5' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='6' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='7' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='9' />
                        <groupfilter function='member' level='[mn:Ship Date:ok]' member='12' />
                      </groupfilter>
                      <groupfilter function='member' level='[Region]' member='&quot;Central US&quot;' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </groupfilter>
          <order>
            <hierarchy name='[Market]' />
            <hierarchy name='[mn:Ship Date:ok]' />
            <hierarchy name='[Region]' />
            <hierarchy name='[yr:Ship Date:ok]' />
          </order>
        </groupfilter>
      </group>
      <group caption='Profitable discount &gt; 10%' delimiter=',' name='[Set 4]' name-style='unqualified'>
        <groupfilter function='except'>
          <groupfilter field='[Discount&gt;10]' function='reference' />
          <groupfilter field='[NegativeProfitOrder]' function='reference' />
        </groupfilter>
      </group>
      <group caption='Top5Customer' name='[Top5Customer]' name-style='unqualified' user:ui-builder='filter-group'>
        <groupfilter count='5' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
          <groupfilter direction='DESC' expression='SUM([Profit])' function='order' user:ui-marker='order'>
            <groupfilter function='level-members' level='[Customer Name]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </groupfilter>
        </groupfilter>
      </group>
      <drill-paths>
        <drill-path name='location'>
          <field>[Country]</field>
          <field>[State]</field>
          <field>[City]</field>
          <field>[Postal Code]</field>
        </drill-path>
      </drill-paths>
      <layout dim-ordering='alphabetic' dim-percentage='0.100467' group-percentage='0.341121' measure-ordering='alphabetic' measure-percentage='0.390187' parameter-percentage='0.168224' show-structure='true' user-set-layout='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[Sub-Category (group)]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Accessories, Appliances, Art and 1 more&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Other&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Accessories, Appliances, Art&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[io:Set 3:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>true</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>false</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='dynamic high profit' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='110000.0'>
          <calculation class='tableau' formula='110000.0' />
        </column>
        <column caption='sheeping cost cut off' datatype='integer' datatype-customized='true' name='[Parameter 2]' param-domain-type='any' role='measure' type='quantitative' value='525'>
          <calculation class='tableau' formula='525' />
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (global_superstore_2016)' name='federated.1gsjgqe08lz0s91605vrf0hsvyop' />
          </datasources>
          <datasource-dependencies datasource='federated.1gsjgqe08lz0s91605vrf0hsvyop'>
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column caption='neg Profit' datatype='string' name='[Sub-Category (group)]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[Sub-Category]' default='&quot;Other&quot;' new-bin='true'>
                <bin default-name='true' value='&quot;Accessories, Appliances, Art and 1 more&quot;'>
                  <value>&quot;Accessories&quot;</value>
                  <value>&quot;Appliances&quot;</value>
                  <value>&quot;Art&quot;</value>
                  <value>&quot;Tables&quot;</value>
                </bin>
              </calculation>
            </column>
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[Sub-Category (group)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Profit:qk]</rows>
        <cols>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Sub-Category:nk]</cols>
      </table>
      <simple-id uuid='{560E2A74-82EA-4FA0-B935-421939489B8A}' />
    </worksheet>
    <worksheet name='Sheet 10'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (global_superstore_2016)' name='federated.1gsjgqe08lz0s91605vrf0hsvyop' />
          </datasources>
          <datasource-dependencies datasource='federated.1gsjgqe08lz0s91605vrf0hsvyop'>
            <column datatype='string' name='[Customer Name]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column-instance column='[Customer Name]' derivation='None' name='[none:Customer Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[Set 2]' />
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Customer Name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Profit:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[Set 2]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Profit:qk]</rows>
        <cols>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Customer Name:nk]</cols>
      </table>
      <simple-id uuid='{C994DF14-13F6-4D72-A09D-C934DB9853D9}' />
    </worksheet>
    <worksheet name='Sheet 11'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (global_superstore_2016)' name='federated.1gsjgqe08lz0s91605vrf0hsvyop' />
          </datasources>
          <datasource-dependencies datasource='federated.1gsjgqe08lz0s91605vrf0hsvyop'>
            <column datatype='real' name='[Discount]' role='measure' type='quantitative' />
            <column datatype='string' name='[Market]' role='dimension' type='nominal' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column datatype='date' name='[Ship Date]' role='dimension' type='ordinal' />
            <column datatype='real' name='[Shipping Cost]' role='measure' type='quantitative' />
            <column-instance column='[Discount]' derivation='Avg' name='[avg:Discount:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Set 3]' derivation='InOut' name='[io:Set 3:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ship Date]' derivation='Month' name='[mn:Ship Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Market]' derivation='None' name='[none:Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Shipping Cost]' derivation='Sum' name='[sum:Shipping Cost:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ship Date]' derivation='Year' name='[yr:Ship Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[io:Set 3:nk]' />
              <size column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Shipping Cost:qk]' />
              <lod column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Market:nk]' />
              <lod column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Region:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[avg:Discount:qk]</rows>
        <cols>([federated.1gsjgqe08lz0s91605vrf0hsvyop].[yr:Ship Date:ok] / [federated.1gsjgqe08lz0s91605vrf0hsvyop].[mn:Ship Date:ok])</cols>
      </table>
      <simple-id uuid='{AEC46409-4196-4FBB-A321-523BCA7F94C7}' />
    </worksheet>
    <worksheet name='Sheet 12'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (global_superstore_2016)' name='federated.1gsjgqe08lz0s91605vrf0hsvyop' />
          </datasources>
          <datasource-dependencies datasource='federated.1gsjgqe08lz0s91605vrf0hsvyop'>
            <column datatype='real' name='[Discount]' role='measure' type='quantitative' />
            <column datatype='string' name='[Order ID]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='date' name='[Ship Date]' role='dimension' type='ordinal' />
            <column datatype='string' name='[Ship Mode]' role='dimension' type='nominal' />
            <column-instance column='[Discount&gt;10]' derivation='InOut' name='[io:Discount&gt;10:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ship Date]' derivation='Month' name='[mn:Ship Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Ship Mode]' derivation='None' name='[none:Ship Mode:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Ship Date]' derivation='Year' name='[yr:Ship Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[io:Discount&gt;10:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Ship Mode:nk] * [federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Profit:qk])</rows>
        <cols>([federated.1gsjgqe08lz0s91605vrf0hsvyop].[yr:Ship Date:ok] / [federated.1gsjgqe08lz0s91605vrf0hsvyop].[mn:Ship Date:ok])</cols>
      </table>
      <simple-id uuid='{29A3DCD2-0A4B-4C63-A4BE-13C795762159}' />
    </worksheet>
    <worksheet name='Sheet 13'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (global_superstore_2016)' name='federated.1gsjgqe08lz0s91605vrf0hsvyop' />
          </datasources>
          <datasource-dependencies datasource='federated.1gsjgqe08lz0s91605vrf0hsvyop'>
            <column datatype='real' name='[Discount]' role='measure' type='quantitative' />
            <column datatype='string' name='[Order ID]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='real' name='[Shipping Cost]' role='measure' type='quantitative' />
            <column-instance column='[Profit]' derivation='Avg' name='[avg:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Set 4]' derivation='InOut' name='[io:Set 4:nk]' pivot='key' type='nominal' />
            <column-instance column='[Order ID]' derivation='None' name='[none:Order ID:nk]' pivot='key' type='nominal' />
            <column-instance column='[Shipping Cost]' derivation='Sum' name='[sum:Shipping Cost:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='false' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[io:Set 4:nk]' />
              <lod column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Order ID:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[avg:Profit:qk]</rows>
        <cols>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Shipping Cost:qk]</cols>
      </table>
      <simple-id uuid='{24992106-471F-49B4-9F09-E7D5A74A3A0B}' />
    </worksheet>
    <worksheet name='Sheet 14'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (global_superstore_2016)' name='federated.1gsjgqe08lz0s91605vrf0hsvyop' />
          </datasources>
          <datasource-dependencies datasource='federated.1gsjgqe08lz0s91605vrf0hsvyop'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='string' name='[Market]' role='dimension' type='nominal' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Market]' derivation='None' name='[none:Market:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='stroke-size' id='refline0' value='4' />
            <format attr='stroke-color' id='refline0' value='#ff0000' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <reference-line axis-column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Sales:qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-pane' value-column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Sales:qk]' z-order='1' />
          </pane>
        </panes>
        <rows>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Sales:qk]</rows>
        <cols>([federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Category:nk] / [federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Market:nk])</cols>
      </table>
      <simple-id uuid='{FDF7FD9F-4643-4D0D-ADE2-2B7A01D9E3FC}' />
    </worksheet>
    <worksheet name='Sheet 15'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (global_superstore_2016)' name='federated.1gsjgqe08lz0s91605vrf0hsvyop' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='sheeping cost cut off' datatype='integer' datatype-customized='true' name='[Parameter 2]' param-domain-type='any' role='measure' type='quantitative' value='525'>
              <calculation class='tableau' formula='525' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1gsjgqe08lz0s91605vrf0hsvyop'>
            <column caption='sheelping cost bucket' datatype='string' name='[Calculation_789255887313924097]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF AVG([Shipping Cost])&gt;[Parameters].[Parameter 2] THEN &quot;HII&quot;&#13;&#10;ELSE &quot;LOW&quot;&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Order ID]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[Ship Mode]' role='dimension' type='nominal' />
            <column datatype='real' name='[Shipping Cost]' role='measure' type='quantitative' />
            <column-instance column='[Profit]' derivation='Avg' name='[avg:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Shipping Cost]' derivation='Avg' name='[avg:Shipping Cost:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Order ID]' derivation='None' name='[none:Order ID:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ship Mode]' derivation='None' name='[none:Ship Mode:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_789255887313924097]' derivation='User' name='[usr:Calculation_789255887313924097:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Ship Mode:nk]'>
            <groupfilter function='member' level='[none:Ship Mode:nk]' member='&quot;First Class&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Ship Mode:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[usr:Calculation_789255887313924097:nk]' />
              <lod column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Order ID:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[avg:Shipping Cost:qk]</rows>
        <cols>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[avg:Profit:qk]</cols>
      </table>
      <simple-id uuid='{97BD89CC-C2BE-4992-9EAF-57A44A4A45B1}' />
    </worksheet>
    <worksheet name='Sheet 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (global_superstore_2016)' name='federated.1gsjgqe08lz0s91605vrf0hsvyop' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='dynamic high profit' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='110000.0'>
              <calculation class='tableau' formula='110000.0' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1gsjgqe08lz0s91605vrf0hsvyop'>
            <column caption='Threshold high profit' datatype='string' name='[Calculation_613334025878499331]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF  SUM([Profit])&gt;[Parameters].[Parameter 1] THEN &quot;above threshold&quot;&#13;&#10;ELSE &quot;below threshold&quot;&#13;&#10;END' />
            </column>
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_613334025878499331]' derivation='User' name='[usr:Calculation_613334025878499331:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Sub-Category:nk]' direction='ASC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Profit:qk]' shelf='columns' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[usr:Calculation_613334025878499331:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Profit:qk]</rows>
        <cols>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Sub-Category:nk]</cols>
      </table>
      <simple-id uuid='{A7605BE8-4919-449D-9C01-2631E965305B}' />
    </worksheet>
    <worksheet name='Sheet 3'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (global_superstore_2016)' name='federated.1gsjgqe08lz0s91605vrf0hsvyop' />
          </datasources>
          <datasource-dependencies datasource='federated.1gsjgqe08lz0s91605vrf0hsvyop'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column datatype='string' name='[Segment]' role='dimension' type='nominal' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Profit:qk]' />
              <size column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Sales:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Category:nk] / [federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Sub-Category:nk])</rows>
        <cols>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Segment:nk]</cols>
      </table>
      <simple-id uuid='{037E8F74-0B37-4E68-B873-5D79907D2CD0}' />
    </worksheet>
    <worksheet name='Sheet 4'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (global_superstore_2016)' name='federated.1gsjgqe08lz0s91605vrf0hsvyop' />
          </datasources>
          <datasource-dependencies datasource='federated.1gsjgqe08lz0s91605vrf0hsvyop'>
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='false' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Profit:qk]' field-type='quantitative' max='9358.3063944444439' min='0.0' range-type='fixed' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Profit:qk]</rows>
        <cols>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Sales:qk]</cols>
      </table>
      <simple-id uuid='{85524A8E-65DB-42C8-936B-6B5980BEFAAF}' />
    </worksheet>
    <worksheet name='Sheet 6'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (global_superstore_2016)' name='federated.1gsjgqe08lz0s91605vrf0hsvyop' />
          </datasources>
          <datasource-dependencies datasource='federated.1gsjgqe08lz0s91605vrf0hsvyop'>
            <column datatype='string' name='[Customer Name]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column-instance column='[Customer Name]' derivation='None' name='[none:Customer Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Customer Name:nk]'>
            <groupfilter count='5' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([Profit])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Customer Name:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Customer Name:nk]' direction='ASC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Profit:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Customer Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Customer Name:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Profit:qk]</rows>
        <cols>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Customer Name:nk]</cols>
      </table>
      <simple-id uuid='{DD4ABB52-F9D9-4093-BA73-33EBDBF667A3}' />
    </worksheet>
    <worksheet name='Sheet 7'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (global_superstore_2016)' name='federated.1gsjgqe08lz0s91605vrf0hsvyop' />
          </datasources>
          <datasource-dependencies datasource='federated.1gsjgqe08lz0s91605vrf0hsvyop'>
            <column datatype='string' name='[Customer Name]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column-instance column='[Customer Name]' derivation='None' name='[none:Customer Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[Top5Customer]' />
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Customer Name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Profit:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[Top5Customer]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Customer Name:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Profit:qk]</rows>
        <cols>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Customer Name:nk]</cols>
      </table>
      <simple-id uuid='{9D82D1E6-A003-44A0-B960-809DF070FC6A}' />
    </worksheet>
    <worksheet name='Sheet 8'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (global_superstore_2016)' name='federated.1gsjgqe08lz0s91605vrf0hsvyop' />
          </datasources>
          <datasource-dependencies datasource='federated.1gsjgqe08lz0s91605vrf0hsvyop'>
            <column datatype='string' name='[Customer Name]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column-instance column='[Customer Name]' derivation='None' name='[none:Customer Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[Set 1]' />
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Customer Name:nk]' direction='ASC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Profit:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[Set 1]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Profit:qk]</rows>
        <cols>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Customer Name:nk]</cols>
      </table>
      <simple-id uuid='{73ED4C7F-02FF-47A0-B7FC-314FE7C97502}' />
    </worksheet>
    <worksheet name='Sheet 9'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (global_superstore_2016)' name='federated.1gsjgqe08lz0s91605vrf0hsvyop' />
          </datasources>
          <datasource-dependencies datasource='federated.1gsjgqe08lz0s91605vrf0hsvyop'>
            <column datatype='string' name='[Customer Name]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[Set 1]' />
          <filter class='categorical' column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[Top5Customer]' />
          <slices>
            <column>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[Set 1]</column>
            <column>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[Top5Customer]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{D97CC5F4-3F7D-4C20-85B5-3DDDD1B8EF46}' />
    </worksheet>
    <worksheet name='Treeemap'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (global_superstore_2016)' name='federated.1gsjgqe08lz0s91605vrf0hsvyop' />
          </datasources>
          <datasource-dependencies datasource='federated.1gsjgqe08lz0s91605vrf0hsvyop'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='integer' default-format='*00000' name='[Postal Code]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Postal Code]' derivation='None' name='[none:Postal Code:ok]' pivot='key' type='ordinal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Sales:qk]' />
              <color column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Profit:qk]' />
              <text column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Sub-Category:nk]' />
              <text column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Country:nk]' />
              <text column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:State:nk]' />
              <text column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:City:nk]' />
              <text column='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Postal Code:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{B504E710-87A3-419D-91D4-A4ED6214DE3B}' />
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[Sub-Category (group)]' type='color' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{EDFCBA33-9392-4CB9-A8D6-8EFF467EEE8B}' />
    </window>
    <window class='worksheet' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[usr:Calculation_613334025878499331:nk]' type='color' />
            <card mode='type_in' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{A0332710-D547-4418-A0B2-751335CA3F95}' />
    </window>
    <window class='worksheet' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Profit:qk]' type='color' />
            <card pane-specification-id='0' param='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Sales:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{B2AD60A5-2F9D-449B-B122-BD893F4B821B}' />
    </window>
    <window class='worksheet' name='Sheet 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{0852F8AA-0A59-46C0-8E9B-6E1BFA1AB620}' />
    </window>
    <window class='worksheet' name='Treeemap'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Profit:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{FF13D5E3-A7EC-44FF-9565-C991E6E2F24D}' />
    </window>
    <window class='worksheet' name='Sheet 6'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Customer Name:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{1D4899BA-A9A7-4DDE-9EFC-69D2BDF3F599}' />
    </window>
    <window class='worksheet' name='Sheet 7'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Customer Name:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{28AADD6A-8213-4B3F-BD3A-42BE8C916453}' />
    </window>
    <window class='worksheet' name='Sheet 8'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{7EB35DA1-CB59-4806-8D47-69EB607E3164}' />
    </window>
    <window class='worksheet' name='Sheet 9'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{1324979D-A29C-4622-B7BB-114A2FBA623F}' />
    </window>
    <window class='worksheet' name='Sheet 10'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{DE1D7767-BD83-4D09-B5D2-C5B365442CF8}' />
    </window>
    <window class='worksheet' name='Sheet 11'>
      <cards>
        <edge name='left'>
          <strip size='170'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[sum:Shipping Cost:qk]' type='size' />
            <card pane-specification-id='1' param='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[io:Set 3:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[io:Set 3:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5E5E9994-CFD0-4692-8712-955A94DD1F29}' />
    </window>
    <window class='worksheet' name='Sheet 12'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[io:Discount&gt;10:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[io:Discount&gt;10:nk]</field>
            <field>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Ship Mode:nk]</field>
            <field>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[yr:Ship Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1A621053-DB6F-476D-AFA8-044C2BD181CF}' />
    </window>
    <window class='worksheet' name='Sheet 13'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[io:Set 4:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight field='[federated.1gsjgqe08lz0s91605vrf0hsvyop].[io:Set 4:nk]'>
          <color-one-way>
            <field>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[io:Set 4:nk]</field>
            <field>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Order ID:nk]</field>
          </color-one-way>
          <bucket-selection>
            <bucket>true</bucket>
          </bucket-selection>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1082977A-CEE2-435C-9B46-4652071B9457}' />
    </window>
    <window class='worksheet' name='Sheet 14'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Category:nk]</field>
            <field>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Market:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D58C8A3B-EEC0-4024-9035-8CF9A2BD7E14}' />
    </window>
    <window class='worksheet' maximized='true' name='Sheet 15'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='type_in' param='[Parameters].[Parameter 2]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Order ID:nk]</field>
            <field>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[none:Ship Mode:nk]</field>
            <field>[federated.1gsjgqe08lz0s91605vrf0hsvyop].[usr:Calculation_789255887313924097:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{52592DA2-5A60-4399-BC7F-D61FE6E575F2}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Sheet 11' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nO29Z3BkWXag97303gEJ700VCmVQKNdV1V3te2bI5tIslxqK5MaKu+QGJf5Y
      RVDaH9JGiFKEFApJoR9a7mqp1XIZFMkZcmbJ8TM9PV093V2uy6NQBgXvbSbS+2f0Aw00gHwv
      E4UEKsvkF9FRQL+L++579517zz33nHMFRVEUKlR4SdGVuwEVKpSTigBUeKmpCECFl5qKAFR4
      qakIQIWXGkO5G1Chwm74wV//KRHBSXPPK6ze/JTXf/938QGzI/cw1/fid2z9tL//b/9bZuQO
      3v1Hv82BOtfG/68IQIXnknQ2S233QfoPtfKTSyE+/Ptv4K4/QbMyj83g4IPvXwcJ3vylX6PJ
      Y+bEiZNc8LfxvTuPSToDDE4EOXW6v6ICVXg++ZXf/F2azSG+8d1PMZjdvP3ea8yPThFamiEW
      jyJ7O3nzaB2DQ7MbfyNJInq9wMjIGImlYcZizooAVHg+ufjDv+Xm/Wla2hpxuD0YDUZcThtW
      uwujDsYHLvPTW1McPtgIwL2Hj/nO5WnePneQbEbEVVWLw2JAqOwEV3jRyATGuTwt8/aJrqJl
      KwJQ4aXmmVKBlpaWyt2EChq8qH3zTAlAhQpPm6cqAGMLYRRFZHr4HsGUgiLneHTnc67fG0F6
      bhUxhdHB61y785CcpDAzPMCtB2NICoSXpphcWAVkhgc+59Ort0lmpXI3+KVBFjPcv3WFWw8n
      yMQDXLl0lVAyi5hN8PjxMBnpKQtAdPw+wUgECykW45COR6luO0yTNcpcKPc0m7J3pEIY6w7R
      bFVYXBpmOu6kWogxtxoiGk0STyYAmdrWwxxvtvB4drXcLX5pyCYi+Lv6cUSXuTwe58jxgww9
      GCayGkKW0qTFpywA9X47OWMVNV4HAFaXD0MuRET0UOcxPs2m7B1WHx6ihDDjJ4OrsY3aajeJ
      DLS0NCAAYCAdmuLzR0vUVznK3OCXB4urGn18kVxVPdW1LbgcPqzGHL7aJhxmPfCUBWBhJYHT
      8uXvqdVFFhN6DvZ0YHpeVyPpABMrIocOdGLxVhOdm2QpEMFu3rTJLiYxVXXy6vEWpmYD5Wvr
      S0YiNE8wZ6O3qxlpaZpofJVUbutA+1RdIdydR1HCs3wyuISkD+Foa2R5YoKF6XH6Tpx5mk3Z
      M8ScxOriGJ8sTnL41Cu0OB6zIrrp8xm49vFVkoDRaCK7PMZq1syJk33lbvJLg5QTmRsfZm58
      mKP9h7g/MExv/0nmRgYYmQ3Civhs7QMsLS1RW1tb7mZUUOFF7ZunOgMUsyXHYrGn1JIKT8qL
      2jdP3Ru02CjyIo4yLwovYt88r0vPChX2hIoAVHipqQhAhZea0tcAisTMxBh6Vx0N1WuhZrPj
      jwgnJczOKrpb60u+RYUK+0XJM0BgdoxgWsfc0ADRL7wZXN5q/B4zSyuRXdebzUkMzwQRJXnX
      dYiSzPBMkGxuf/1v4qks4/MhZPmZsSjvGllWGJ8PEU9lS6pneinCajSlef1Z6d+SZ4BETqKt
      pR3FkSIYE3H5DLi81UQCK3QfaEdRFERRBECSJLJZ7Re7+XogkuSHV4f5x185gstm3lXbYskM
      P7w6zNffOkS127arOnbC1MIqlwZn+K13j2A26vftPk+DTE7iw5ujvHakme4m38b/L9Z32/nk
      7gTt9R7O9DSoXn9W+rfkjbD58YeI9iayCw9wHzyL3yogZ5PcH57m8OEe9MKXZYttpmy+rigK
      kiyj1+kQBEHzbwqxF3XsBFlRkGUFvU7Y1/s8DdbemYJOJ6Db9CxPuhEmSjI6QUCnU38fz0r/
      lqwC1TW1EpgYIGFtwkOEhdUY2WyKuoamLR//kyIIAga9vqQPai/q2Ak6QcCg318he1oIXzyL
      rsRnMeh1mh//l/cpf/+WrALpTHZOnL2w8Xu9de1fi0b5ChWeJSpm0AovNRUBqPBSUxGACi81
      FQGo8FJTEYAKLzUVAajwUlMRgAovNRUBKIIkyQyOLxGOpcvdlAr7QEUAiiDKMgOjSwSjyXI3
      ZU+4MTTH3378gGcoFLysVA7IKILZaOB3vnKs3M3YM1prPXgc1nI345mhIgAvGTVeOzVee7mb
      8cxQNhXox5+PMDheWsbhy/enuXx/uqQ6BseX+PHnIxWV4CWl5BlATIa5fvM2gqOBMyd60AOx
      lSlu3R+nruMwPa01qn9X63XgspfmMlflLN3H3223kBN3H5RR4fmmZAFYWJin/fAriEsPWUko
      1NkFRicWOHPhdSwF3GFPHCg9VLKntbrkOlpq3bTUukuup8LzSckCIAMWswnZaiKWlcBuIBEL
      cP2zTxDNXt45d3xXEWGyrBBLZnDazSX7phfixtA84/Nhvv52767rCMfTzCxH6W3zoy8g9M8z
      TxoR9rxQsgB47FYe3L+DlBE5XpchFM/RWN9AOGcglpYRBAGjcS0hqV6vx2Qyada1+fpSKM5/
      +NEAf/irp3E7dhcytxMOttbQ4HdjNBp3HVgRzyQYmQtzpLMe03MeEqlFsb57Xik9N6giEwmH
      0JkdOMwCaUnArIdQKIzV6cFm/jIb75OEREqyTDyVw2k1FYwsehaQZQVZeTFCIrWo5AbVQtDh
      9lZt/Gr9YgCsqvaXVK1ep8Nt37+Rfy/R6QR0vJgf/otOZSe4QllQFIVsTiy7+bkiABXKQiCS
      5P/+zk1iyfIurCsCUKEsuB0WfunVA9gs5T0aq+IKUaEsmAx6Oht8xQvuM5UZoMJLTUUAKrzU
      lE0Abj2eZ2oxXK7bV6gAlHENEIgkMZsqS5AK5aVsX+BXTneW69YVKmxQNgF4UV0GKjxfVBbB
      FZ4YWVbIilLZd3H3gooAVHhihqYD/Ol3b5LZ55N3ngb7EhG2NHqXO5Or1LccoO9A0x40c3ck
      0zk+uDHK2/3tuB2VhO17RUeDlyr34RfC9XtfIsJicXjtnbdxlFnNFwSwmY3PvDv184bFZMBi
      cpS7GXvCvkSEWew6rl/8GUZ3I6+d7NlVRNheoBfgreMtAC9ENNP6gXIG/dPXXJ/XiLDB8WVm
      lqP84tku1ev7EhEmKgJ+fzWRjLTriLAK+Xx2awKAd062P/V7P699U+NzYjAaNCP+ShYAd20r
      h82utYgw01pEmL2lg0gsRbfHW2r1FTZxoLmqeKEKW2iucdNco530YJ8iwoz4LZXkS3tNc42r
      3E144aiYQSu81FQEoMJLTUUAKrzUVASgwktNRQAqvNTsSACy6TTypn8rPL9MLoa5+Xj+hXBk
      2wuKCkAyHOAHf/03DIyO8qNvfIfQ02hVhX0jkcoSjKQ0r8uKQiCSJJMVn2KrykdxAYgEmF2Y
      Z2JsDG/vYSpbW883vW1+vnK6QzMeI5uT+OZH9xlfeDmGuqICUN3awy9+9RVC8/OMPxwh8TRa
      VWHfEITC+UvNRj3/9Bf76W56OXadd7QTHF6J8e6v/xb1Fh3lTWNUYb8RBKHsyaqeJjtaBNvc
      Jj7+7rf51rd+UpkBKrxQ7GgGaD50CkdTCjBSCSspH7eHF4C9OV2nwho7mgHioQAzMzP84Ds/
      YLv9QEyGufLpRa7eHmIjQE6RGbv9KQ9nI3va2JedYvp7hSdnZwIQXmFmZoZwOMn2KND1iLAm
      S4yVxJptORVdJpTIkRNfDlPa06K/u47+7rpyN2NHfOvnD7gxNF/uZnBzaJ5v/Vz7YPAdqUBu
      j4tEbIj2E/1sd8jNjwjT8eDeI7xVLuaicRTFV7aIsJcNRYGcKGE06PZ8pnjSvjnS5sdlN5e9
      P+ur7NgtBnK5nOr1HQnAo9sP+Mpv/x73v/0NVoHNZzPmR4SBz+8nEpwnolgrEWFPkVgywzc+
      esivv3GIKnfpR8hu5kn75lCb+vG4T5tGv4nGAocV7UgAeo738KO/+QvMVa15G2FqEWEdPUdQ
      pAP0ys9/1oDnCYvJwKtHm7FbK4PITtmRAEQjEr/62/+Exbu3SAFb8gFonBEm6E2YK9//U8Vo
      0HO4/dkYeZ8XdrYRtjTBRNbA/MADGs+c2u82VSgjiqKgKGspZcptcRocXwLgaMf+nU65IyvQ
      sTe+Qq0hS+9rF/IWwRVeLLI5if/44zuMzK6WuymkMiKpzP5aEnckADd+8iGj85P87O9+uCfe
      oIqisBCMEY6nn3m3XEVRkGVl39u5Gkvx5z++SzxVXquJwaDnjb426qvKn/jqdE8Dp3sa9vUe
      OxKAqloHq3ELJ04cYC+WV7Fklv/zb67ytx8/2Ej29KySE2W+/clDphb3d1PPYjTQ01qN0bD7
      GCVFURAluSRh1esEupp8OG3aZzTLe3CfnfA0Nv6Kvu3I0jL+3lN85bV+DvQe2hMBsJgNnD3c
      zJH2GvS6ZzsoTZJl5gMx4un9HZltFiNne5swG3efqSaWzPJvv3ODQCS5hy3LZ3R2lT//8V2y
      JSTHlWWFRDpbfg1AKUImEVKufXpR+dnHl5SF1ZgiF/uDAiwuLm78LMuyIsuy5vW9IJXJKT+/
      M6HEk5ld17Hezu1tfVL+v58OKFfuT5dURzF20tZvffxA+Vf//uITP49a35XyToKRpPIXP7mr
      xErom/lAVPn9/+17yuPpwK7rEBSlkAjm+Paf/Rn1/efx6jP8/MoQ/+wPfgftybEwS0tL1NZq
      r+iLXX9SEqks378yzNfOdOFxlteNL5MV0el0Jak4e0EsmSGZzlHjtT+RevGkfSPJMgLCviYm
      lmSFyYUQrXWeXedLLfJXMdJSFc1VbhyeGhoVkeCublMebBYjX3/7MG7HbkV27zCbDGX/+AGc
      NjO1Pse+69Z/e/EBN4bm9vUe8VSW718dZjWmHeJZjCIKp50DnW4GBgYA0DW1op1l8dmj3Hbs
      zaQyOQx6HUbD8787uBiMMb0cpa+rVnPN8urRFhz7vCNttxj55fMH8RY4+2F6KUIwmuJ4V+1u
      kuOaOfP2e6W2c1dEEmk+vjPJV051vhARSv/Xf7rOkXY/7587UO6mlMwPro5w8fYE/9M/e4uu
      RvXT3ltq93+oNOh1dDQUjlKPJDIsrsYBdfXtiUwOjz+7SvWFczyNaFGdIGA2Gig0iIe+mPq8
      TutTaFFpvHOyHb+7/AmDUxmRnCjhtJl2PUP2d9cTiqep8+3vXsHHdyYBeKu/bdd1HGn3c7hd
      2xtuR0ppbHWR4eFhhNpq5HB8yzU5m+D2tc+4OzS1kTNoYfwBH3/8MWPzu982c1hNfO1MJ5YC
      ZwlfuT/Dlfszu77HXpHJiQSjKeQC9oSTB+ppqdXeR1+NpvjLD+8RT+6fuTUnSvz1z+7xv/zl
      ZyVtuJ04UMd/8/Vz2Pd5Zo4lM8SSmZLqEAQBXYH9hB0JwMDFnzG2vMLFH/2Ib//d1qiwxdkp
      qtv7cKTnCabWPgB3XTvnX+ljaXZatT5FUZhcDLMSTmjagdc3QQqNUu+e7ODdkx07eQRNlkJx
      RmaDJdmjx+dDfPNngwXt4sWe5T998ohv//whH9+Z2HU7sqLEwNgSaY2cPjqdQHu9l942P6YS
      1iI76ZtipLMiA6NLZEXtd/b+uQP7rjLuSAVyec0MzywRSxtoqTdsiQrLIeC2W1F8DsIpCb/V
      gE6McfXGfapae9d2J7cFxEQSGf6Pb1yhq8nL77/fv2EdedKgi/XXX0rQxcT8KpOLEVprnLuu
      o7XGyW+904ugyLtuy+JqDEVZE8jd1hFPZbl8b4patwWfS10tPN/bgKzUI/Bkbd3rYKVwNMXl
      wSma/faii+X9PItyRwLQceItqhIZPP+wBts2lcRu1DM5PUUuFOHASZlUNkc4mqLn8CFGJmYR
      uurzAmJ0KZF4KksiLWIwGjB9YUkoR0BMTlJIpHOaR+goikIyk8NsNGjamiPhJI9nVjnb27Rr
      e/S/+I2zPJxcoa+zFpNpd6qF12jkv/zV08DeW8D2um9qq4z8wa+c3nev080zu9p9dtRb4aUp
      rlz+jJ/+9DJpQWBzNdVNnVRZZJp6+nDqcqSzImaDjmAwzOGjR1Xr8zgs/NP3+/m1Cz0lTcV7
      wdGOWr52Rv0ANYBMTuIvfjLA6Jy2d+TkYogPb4yTye3ec9FlM3O2twmruTS9eimU4Nl2L1xj
      LhDjmx/dL5imcS8YHF/mR9dGNa/vaAZQFJlkPEYyqstPjivoae74Uk/zmgBHC74Csdt6vY7X
      +1p3cuuSkGWFcDyN225GrzEy3xlZZHgmyD//BydUr5uMev7Rm70FncP6Outor/diK/HjLZXF
      1Tj/459/wh99/dwzn9nt/vgyf39piO5mH9WevQ3f3EwwmmJmRduRcUczgMPfwvu/8iu8cerQ
      njWsGIqikBOlkhansVSG//DDOwSj2qNMjcdGe51H87pOEPB77AWtUWPzq3zzo/tlPznd57Ty
      7skOGqp3v57ZCaFYipuP55Hk3XvyHu2oob+rrqgdvxTiqSyD40vMLceYC8RUyxSZAbLcvXyJ
      +6NTzI1NUH/qPbr696GlKoRiab57aYjfeOvwrncUnVYzv/dL/bjs2qP34faaksMIO+q9+N+x
      Fzw5fSkUx2o24iowkxRj3XSp9T6yokQgkiSdEbFb9m8tNTwT5HuXhznUUq0Zf3xvbAmf00qT
      xsF+DdVO/ug3z+2rCjwwusRHXxwte3dkkSZ/fluKzAA5xh8/Jp4Bv7+BI329e+IOvROsZgPH
      OutKekGKopBI5ZDl/dWKzSYD1W4bugKLuT/93i0u3tq9iTOZyfEnf3edP/m76yQz6ik+HFYT
      v/sLxzUtQDshJ0rcfDzPciiB1uR74kAD//K3zhfcoV9zQdB2yxY2Njp3vwC+P77Mv/p/L3J5
      UN3cXl/t2GijR8Ndoqgv0K/97h+ALDJ6/xbXf/4Jnf/kHz4Vf6BIIsPMSoSOBg8m4+46NJ7O
      8q2fP+S33ztKjbe8u7Dvn+2mukCqEkmWSaRyOKwmVQ9Kk0HPodbqjZ/VEAQBcwFVbSf87NYE
      /+67N2n2u/jX//UvAPltMRp0uA2FvWvfP9ddUjt2wqcDUwyOLyOw5nu0nfY6D3/yL36BRDqn
      ecRs0bclCALojXT3naW7r+Q275ihqQDf+XSItlrPrl0dXDYz//yXT2It8aMoRiSeJhBN0Vrr
      1jSDnjxYOLQvEEnyZz+8y3/1q6dwq4xWBr2OX371ILC/ZkO/x4bHYaG1wLpoJzwNR8RfPLsm
      ZK8fVzeoCIJAldtGVYERu0g8wN7yJPEAyXSO6eUI7XWekke1/ea///cXGZ1b5Q9/7fSurVuS
      LBNNZHDbLfvqQ78e36zTqe/kyrJCJJHGajZu8cXa61iNZ4XyO6hrYLMY6WmpLvjxX380x/VH
      ++tz/rTQ63R4ndaCH/+lwWkuaei7AJIkE4wmyRVwL7g8OM1//PFdzes6nYDXacViKuyI+DTI
      iVLBZ9kLnu2htQhrbq7l51/+1nmCkTUVaD9ZCRU+neGnN8f5qw/v8dXTnfzjr6rrq8oX/z3r
      ZHMS3/hoEID//J2jBS1spfBcC0Axa4csK4zNh+ho8Oxr8L3bbsFt3/+Qy186X9gxbCEYI5bM
      Mr2svfFj0Ouw7NPH9CQoypoLit2i7YIy+UUmjn3V0ncdTbwLigW9b74uSpISjqcUSdIOvE6m
      s0oyndW8Ph+IKr9XYtC0JMnK7HJESaS077MXzCxHlL/68J6yEkrsuo5kOqtcfTCjRBJpzTK7
      DWjf64QFk4sh5Y/+zQfKciiuel2WZSUUSymhWEqzrTlRUmaXI0o2J+66Hc/sGiAQTvJv/u5G
      QX/wD66P8cH1Mc3rtT4H/8N/8QadGlFLOyEnSvzo2iizK9Fd17ETHk2u8KOrI0wthXddh9W8
      llql0GbbXrgy7wXVbhu/8Eq3ZlsFQcDjsOBxWDTbGogk+V//6hLTS7vP2fTMWoEkWSaezOK0
      mTUXhpOLax9LW4kmu0IoikI6K2I06Hft6bkTnnWr15NagULRFGaTYV/DWePJLH/x0wF+8+0j
      u978K7lH1SLCQosTfPrznzM8E9h1vZF4mm/9/CHJAgmpPh2Y4tOBqV3fYydkshL/z/du8Xha
      +1nujy/zjY8GiSa0Z6vhmSBLBRaxO7F6PU/879+8wvevPN7Xe6SyOaYWIyVFjZUsAGoRYYLJ
      ybnzrxBZ3v0ROVazkeNddRuxAmpkc1JJ2cl2gk4nUF/txFbAt2ZoOsCV+7OE42nNMt/+5CHX
      H87uRxOfSWwWY0lZ7gDuTyxzf2JZ83q128Z/9zuvlRSAX/JwoxYR5rDbePx4hPbubtWIMC02
      Xw9Fk1wZnKatzqmpJ/7662tWkf0+hueXz3chCILmfd7pb+HUgVr8botmma+casfvtpX1yCBR
      kvmbjx8ysxzlD3/1ZEEX7+08aUTYud4G6nyOkp43Gl/z4i1Uh9Wk0zz+aCeULABqEWFj9+7g
      aOxCkMVdH5G0GApy7dEc/+C1g1R71N17n0b0mKIoKKx5xGgtxkwmE1534QwJf//ZMH1dtfxn
      bx3e+0bukFg0yUe3J4kls4zMRzjb27Tjv33SiDBZEUBXWhTZuSNr/j37uWAvWQCqmzpJTYyh
      /yIiLJLVUVVTQ3B1hWzOR5XGx1uMxmonrx5t3veUJ0qRkLmcKPPDq8OcOFBfkn/MH339XMGY
      gp2wPhLu9qPy2C38znvHmA/G6OvcvVuDKIpks1msVqvmx/ne6c5d179OqR++oijMBWJEExl6
      WqpVjSllswJFIhFMJhNWq1X1uqIoSLKCXsNnZSdks1keP35MV1fXlvtsZmZmhtXVVY4dO6Z6
      H1GSufV4gc5Gb0FvzqfBjRs3ADh9+rTqdVEUGR8fp62tbddCoigKqVQKk8mEwfClwG7um+Xl
      ZcbGxjh9+vSWMs8aWVHi333nJo9ngvzPv/+2qkt0WVofi8X4yU9+gs/n480339xQkTYjCAIG
      fWkjQDKZZHh4mJqaGk0BcLvdBT8Wg17HK72NJbVjr+jq0o5dBshkMoyNjeH3+zWfKZ1Ok8vl
      cDjU84NGo1E+++wz2tvb6e3tVS1TVVWFy+VCry8tViOdTmOxaNv5x8fHAejoUE99s76+NBjU
      4woMOh2vHKii2aPDblH/1MuyEWYymdDr9ZjNZnT76aLgdvP666/j92tnBltdXWV2tjTrjCRJ
      JJPJkrbsRVFkZmYGSdK2anm9Xrxe7RDCTCaDIAik09rWqJGREa5du1bweigU4uHDh2Qy6ubF
      +fl5BgYGSKV2H9AeCAT42c9+RiymHqoIa/3ndmtbeILBIB999BHz8+rWxkQizsL4fZJLwwQD
      6mbssgiAKIobeuR+amCpVIq7d+8WfMkej4f6+nrN66Iocu/ePVZXtbNCzM7O8sknn2haK2RZ
      ZmZmhmBQOwFXNBrl7t27BT+qyclJJicnNa+v1611j0wmw8TEBMvLywQ0Poj12Vin06nOzACh
      UIjZ2dmSLDzhcJhYLEY0qr3DXlVVRVWVdnC/TqdDr9drzkSSJCFJErIsaw4sZVGB9Ho9Ho8H
      p9O5ryt8nU638ZK0iMVihEIhTSHQ6XRUVVVhsWg7u9XV1WG1WjXVjlQqxbVr16iqquL1119X
      1Zu9Xi9vv/02Npv6OiObzTI0NISiKDQ0NKjey+fz8e6775akmhw+fBir1Yrf79ecnVtbWzGb
      zTiduw++b2ho4NSpU1RXVxcvrIHX6+Wdd97R/IZcLhfnz58nnU5r7mKXRQCMRiMNDQ243e59
      VYF0Oh3V1dUFP4jm5maam5sL1tHYWHgNYDKZCnbkugnRbDZrdpYgCNjt2mGbBoOBnp6ejZ+1
      6ii0KF03SRca3ZeWlhgYGKC2tpYLFy6olimmmsDa+stgMGgOCna7nQMHtL1bFUXZmKWqq6tV
      31sxn6b1/hdFUfMbKIsKlM1mefToEWNjY8glpNbIZrMFp2GDwVBwQbhXBINBbt26pTnNms1m
      ampqqK2t3bXA63Q6WltbaW1t3XUd62sVURQ1Va1EIkE6nSYc3r1THsDDhw81dfOdkMvluHnz
      Jjdv3ixpo2t4eJgrV65oXi+LAAiCQENDQ8HF6U64c+cOd+7c0bwej8e5cuVKQf09nU4Ti8VK
      WouMjo4yOTmpeR9BEDh58iRtbW2aI1Y2m2VycnJj13w761aTdHr3R8taLBZOnjzJkSNHqKtT
      z1xmMpkwGo24XC7NwWl9V7hQO44fP05LS36g+jqKohStI5fLFfz4s9ksU1NTmot+RVGora3V
      tCJBmQRgbm6OyclJHj9+rLkIWrdHF3pB6yOiFouLi+RyOWZmtFOoT0xMcOvWLc3riqKQSCQK
      WmcWFhZIp9MEg9oHSD18+JCFhQXN65lMhvHxcc0OF0WRy5cvc/nyZU0hSafTzM3NkUioO92t
      L8YnJiY0P5rl5WVyuRxLS0uabVldXS0448Ha7Ftopkomk9y4cUPT0qTX62lvb6e9vV1TfVlZ
      WeHKlSua/SvLMuPj4zx69EjzPmVZA6zrkA6HQ3NxubKywrVr13jjjTc09c31aVprNItGo4ii
      SCSi7S/e2tpa0M03m83yySef0NvbS1tbm2qZM2fOMD09TXt7u2Y9nZ2dmno3wP3791lcXGR0
      dJSjKjlV0+k08Xh84+ftdcmyzIMHDxgeHqapqYlz587lrQd0Oh1Hjx7dsL+r4XKtpQ8xm82Y
      zeq+Ql6vl76+vpIW2xaLhSNHjmiqp+sCsP6zGjU1NVy4cEFTk9DpdNTV1WG32zXffVkEoKqq
      iq9+9avodDrNRZvL5aKrq0vTKgIU/OAADh06RDgcpr9fPZ2doihEIhESiQRut1v1RZtMJk6f
      Pl1w0ZdKpQgGg5oqQzwe5+OPP8bj8XD+/Pld7Z5Go9ENvT0ajapaYBRFQZa1D7AWBAGPp7A7
      R3d3N06ns+DzGgyGos+wsrKCxWLRtBRt9hFTI5vNcunSJQDefvttVUExGo00NRX2Z2poaECW
      Zc3ZqGxrgHUTpZZObLFY6O3tLfiSCo1SADabjddee21jVNuOLMuMjY0xODioOStkWhAAACAA
      SURBVN3H43Hm5uZYWFjQ/LAGBwcJhUJMTanHJkQiESKRSEG14tSpU7z33nscOqSef7Wqqgqf
      z4fP51O1ja+PdgaDYePf3aDX62lsbNTcKYY13TwajRZUT1dWVgruv6xvYmmVyWazxONx4vHd
      n5cgyzKDg4N8+umnmnWUZQaIRCLcvHkTh8NBf3//vllpBEEoaL/X6XQ0NTVhs9k0Ben69evM
      z8+j0+l4//33VUfQ9Q9Bawaoq6vjlVdewW63a7YnFosxOjrKkSNHVEdNi8XC+fPnN35Ww+Vy
      0dLSUnDzaC8IhUKMjo5y5swZTUFbN9kWqmN9I0xttsnlchtrHa1BI51Oc+/ePXp7e3E48r1x
      182kiqLs3wyQCM7w4U8/4KcfXSH9Rf/Pjz/k4sVPSWiky19eXmZ+fp7p6ekNvbZcxGIxwuFw
      SeZYh8OBwWDQVNf0ej0HDhygsbFRMwPC0NAQo6OjTExMqI6skiQxMjLCyMhIQXPrdgfD7QSD
      QSYnJzVH71wux8DAAIFAQLOM3+/n3LlzBdcAjx49Krjor6+vp7m5WXP/xOPx8M477/DOO+9o
      qm25XI7l5WXNBX04HGZoaIjFxUXm5tTzR5U8AwTCMU6eewtp5SHLMYkWt56Gjl6yuQfAl3op
      rI2QoihSU1NDe3s7drsdq9W6Ienr19cfbm5ujubm5pIWW4VIpVIMDQ1tWE8aGvLTFx4/fpxE
      IkFbWxsOh0PVAnP+/HmSySQej0fTQpPL5TR3pROJxIY/0sTEBF1dXXmzYi6X29gYymazqqph
      NpslEomQyWRUZ1VRFBkcHCQQCODz+VQFNhQKMTQ0RCaT2fLhbe6bTCZDKpXC5XJpjqw+nw+L
      xaL5PiwWC2fOnEGn02mWWd8Y1BJ4QRCw2WwYDAbVOsLh8MbskUgkVMuUrgIpysZHrpUdeX3U
      W9f9nU4nZ8+eBdjyAtevw9rH+ejRI2prawvukBZumsLq6io+n0915DWbzVRXV7O6uorX61Xt
      TLfbTWdnJ42NjZqdrdfrkSQJvV6vqTdfuXKF2tpaent7865ZLBYcDsfGR7e+W7uZ9al8/We1
      tgiCgCiKmtfj8TjLy8tkMhkWFxdVvUuj0SjZbJaVlRXNvrl06RLBYJBXXnlF0xCxkwD6YgPb
      xMRaNm2tdVE6nSYajRKPx1XXeQ0NDXR2dpJIJDT7r2QBqK/xc+n6JwhWP+cboyys6kkvDnNv
      aAJnVODt0715AgBrH+f2jtr8+7rb7vrIqUYxd9loNMqlS5e4cOGC6lRrMpnwer2kUinNRd/6
      PoLD4dCciicmJnj06BFf/epXVXVRWFMbtFw/zGYz7733HpFIBK/Xq/phGI3GDZcMNQFZf566
      ujosFovqdZfLRWtrK/F4XHNXen1RmkgkkGV5Q8ff3jeSJCGKoqagXbx4sSSrF8DBg2vJgNXu
      IUkSg4ODxGIx7t69S21tbd6saDabOXr0KNlsVnO2KlkATK4a3n73Kxu/11sB30nae09q/k0i
      keDevXs4HA56enpUp/P1HU+tDQwoHgvsdDp5++23Na1AsDZSFbIkmUwmTp48qVlHMpnk3r17
      5HI57t27x7lz5/IEad0FwWKxbAj+dtbdobX87Kenp7l7dy2np91uVx15c7kcqVSKTCajulA2
      GAy4XC4URdFcr6xvTK63We25iy1OFxYWiEQixGIxUqmU6qI+kUgQDocLOhoW82tyOBzodLqN
      f7cTj8f56KOPSKVSvPHGG6oqblmsQPPz84yOjmKxWGhsbMTny09c1dzcjNPpVL22TiFnKlh7
      ScWcturq6gpO14IgFHTZyGazW/RMNebn5xkfH2dpaYm6ujpNYSok7JvjDZJJ9YMnAoEAIyMj
      OBwO1edOp9MMDg6SyWRoaGhQdVVobm4mGAxqrhGALUkO1KivXzsZtKqqSnVBLooit2/fZnZ2
      lgMHDtDf3//E/k06nY7e3l4kSaKnp0d10MhkMsTjcRRF0TS2lEUAPB4PJpNpYxGsRiKR4Nat
      W1y4cEFzDbC+E1xISAqhKArz8/MkEgk6Ozt3tdh2u910dHSwsLDAkSNHNMut73tokUwmN/Rz
      tQVsd3c3y8vLGz+rUV9fz+nTpzXdQ8xmMz6fj5WVFWpq1I+Fam9vp6GhQVPNAjh27Bjz8/Oa
      O+MOh4O6urqS9iNgzX0EUF03wZqlaWRkhFQqxVtvvZV3fd2vKZvNqs4ykiSVRwDWF1rJZJJ0
      Oq0qBFartWhs67qLw24FIJ1Oc+XKFdLpNHa7vajbsxqCIHDq1CmSySRut1tVvWloaOCNN94o
      6EPvcrno7+/XHBBMJhOvvfYagObmoMlk2tCbtTAajRiNxoK7xYX2TmDNraOhoaGgaulwODRV
      S4PBwIkTJ+jo6KCqqkpT0Aq5sMDaOzObzZprs5mZmY3ZWc3nLJfLlUcAHA7HRkik1ksym81F
      N1MKOWPB2hQ4OztLfX296nRuNBqpra0lHA4XVZUKUWxHWq/XF4w6g7XOun37NufPn1fVVeFL
      1aPQ7nghdDodx48fL+gLtBNWV1cZHh7m3Llzmm3p7+8v6Ktvt9uLWveK9UlzczMzMzN0dqpn
      oNjsOau2XjGbzeURAK/XS319/YateL9Y99M/efKk6ksyGAyaQR/rrPsLFXKo2gt8Ph/Nzc0F
      O/327dsAvPrqq6rXZVkmnU5jNptV1bn1NVEpwg5r7zUSiWzMempks9miHqHFKDabmUwmjhw5
      orlW6erqIhaLkU6nVX2GBEEojwCYTCZeffXVonpxMYrpl36/n1dffbVgtJYoikiSpDmCp9Np
      Pv30Uw4dOkRXV9euQzjn5uaw2WyaQe3RaJSlpaWNDUI1iql6o6Oj3L17l+7ubk0HwL3A4/Fo
      hmWuc+fOHWpqajQzWaxbmex2u+Y3sL4GUPOOhbWZtZABw+Vy8eqrr6IoyrPlDQp7k9WtUCwA
      bLWdqyFJEnfv3iUYDPLWW2+pCkEymSSZTJYcIbUeIqiFzWYraBJUFGVDALRMqaFQiEwmUzAu
      YS9oaGigvr6+4GCQSCQKBvhPTU1x584dzp8/r6keFsqAAV/kjiqwAVnM4xSe4xNi1kdmgNdf
      f31XqtTmGFktC5DH4+HNN98suODbCcVy+qysrLC4uEhTU5Pqvdb3GQDeeOMN1QHk4MGD5HK5
      oubhQiwvL3PlyhUaGxs5derUrmJxYc09pNDH5/P5aG1tLRhYX8wosbq6yo0bNzh27JjmuqkY
      z60AJJPJjZFufZPpSVmPs/X7/ZoCIAgCJpOpoOv2Tij2t/Pz8ySTSZaWllRnNqPRSF9f38bP
      arjdbs6dO1eSWhkIBIjFYszMzHDq1Kld11NsgevxeIrWX+ydrScBKKVfnlsB8Hg8G/5ExYI8
      ClEs2dTU1NRGSpP33ntv39K4HDlyhHQ6rTl6C4KgabvfXKZUx0G/37+RtWM/kWWZVCqF1Wrd
      tcB6vV7eeOONkvYanlsB0Ol0RSPC0uk0N2/e5Pjx45o+Os8KNTU1fO1rX9vXNDHrOrMsyxiN
      6ofTrUfrFYrE2wump6e5c+cO586d0wxpLcZOdPxiPLcCsBOMRiM9PT0lmVpbW1txu93YbLZ9
      TeK1F6N3MRRFYXBwkGAwyIULF1QX/Tqdrujicy9wuVw0Njbu2tN3r3hmD8nbC/R6PdXV1SVN
      kTqdbt/3K54mVqu1oOlxJ6ysrHDjxg1NP3744lyFAiGTXq+XU6dOlX1m3peIsInBz/nJT37M
      jUfa6UhSqVTR02Li8bhmpJaiKMRisYI5fWRZLprSJJfLkclkNOtQFIVkMlkwP40oikWT4xZ7
      3lwux+rqasG2ZjKZgg5zsiyTTCY169DpdHR0dHD8+HHNQWH9eQt93JFIhLm5uYJlrly5wujo
      aNG2FnpnO33eQt9IMpkkEolo3kf/x3/8x3+seYcdsLAwR1vPSWpNYSJ6P26LjsmFAK+99irL
      MxPU1dVtZCpYXV3FbDYjiiI/+tGPCIfD1NTUbCTKjcfjmEymjTz3n3zyyYa/x3qZTCazseN5
      8eJFpqamqK2t3UiVvbnMegZis9mMxWLZ8GHfXGZgYICHDx9SV1e3sSm2uUwymeSDDz4A1mz1
      amXGx8e5evUqDQ0NG4l/t5f58MMPCYVC+P1+0ul0XpmRkRGuXLmC0+nEYrGolrl69SpTU1PU
      19cjimJemYWFBT7++OMNR0O1Mjdu3ODu3bu0t7dvtHVzmXg8zgcffEAul9uIcBNFkVgshsFg
      QJIk5ufnCQaD1NbWotfrVev5/PPPEQQBn8+3EU22uczs7Cwff/zxRrCSWpnPPvuMqakp6urq
      Nvprc5nV1VUuXryIw+HAaDTmlUkmk9y+fZt79+5RU1OzEX22uZ37EhG2Jm0KCl8GwsDWdBpd
      XV24XK6N3xVFQa/Xb/xeXV1NR0cHHo9nS5n1AGe9Xk9zc/OG89a6/ry5jNPppLu7G5/Pt2XR
      t7nMeo5Sk8m0xb69XsZgMNDd3b2RYlGtjN/vJ5fLbZyYolamq6trI3Z43aS6uUx1dTWNjY0b
      z6tWprW1dUuQyvYybreb7u7uLWrf9jLr+wybZ4DNZaxWKx0dHXmenHq9fuMd1tfXYzAYNp5H
      rZ7e3t4Nr9/N6tZ6Ga/Xu/ENaJVZ9zZdd97bXsbpdNLV1bURRbe9jCAIGwFCdrtd9Z2UfEJM
      NrrMpet31yLCTrSzmtKjBMe4N75E04F+jrR/abrbfgLMeiMLXd9eZjNqdZSDnbT1adSxF/fR
      uv6k5wQX65tn5Xmf2YOyKzxbvKh980JbgSpUKEZFACq81FQEoMJLTUUAKrzUPHVXiKWlpY2f
      t/u1b0+Uuj2rr5plYXuZYr/vpg41//snva9aPfvR1v163mJ987w+71MVgJ1YEQqVkSRJM+vZ
      OrlcrqCD1PqmXCG/m2J17KRMLpcr6qpbrI5n6XmhcN88r8/77KpAKr4k2wMxFEVhuw23mI/L
      ToI5ttSh4dNS7D5qo+GT1vHEbd2nOrazk/f+VJ53B99IsTpKdoXYLTevXMJV14hJ/2VjEonE
      l85R2Sh3BocIhqLoTRasZmNeUMrS9AgTM3PEMzI2qxW9fluMsZTi9q27hKNRUpIet8O65QXN
      jj9ifGqOxcVFFpeD2FxezEb91jpkkdHHj5iZX0bRG7FaLei2jVLxwBTf/PsPcMoRJqVq6l35
      bZ0ZfcDk3BJZScBms6LXbapDUZCDI1ybVagVAtyeitFY7crrzIFrlzFXN2A1bN0R3SAd5NNb
      4zQ3+reko9xcx+Sju4QVG26bmfX/vaUOMcnVzweoaajDoPvy7zb3TSa6zIOhUVajSUwWK2aT
      4cmeFyAX5dr1AWLxKJLeisO6aZddyjE+MsTU7Pxa3wTXUkYatvevmOLho8csLgURjGasFhO6
      bc+7OPmQv/z+p+irW6h3mfKet2wCkArN8Wh0jlA8Q53fiyAIWwVAZ0DMJIiGQ8QD04QMNfgd
      W6c+g0EgGo0RCkcYn56jvblhq/RnQgwtipzq68XjzM+343RXUVPjx+/3U+OvwmJSmcIFAWSR
      eDRMOBRiIZSisWZrcHoyvMzo7DJmQcZY3UqdKz9cUScoxKJRQtE4M3MLtDRuioMV0ww/vMvD
      uSiIWWobGnHZ8l2VhWyI2/fGiCSSeH0+DPptI6oCM2MPWQxGSEt6fG4VV2MxzsD9x0RjMWwu
      HxajPq+O4Pw4k3MrxDIyNb61rA+b+0bQ68mmkoQCQUKBeRR7DS7LtuOYCj0vQGKekYiT08e6
      cFi3vS+dHrevmhr/F31T5cNoUIn71emQcxlikRCR1SVWMibqvFu9SwOLs0yvhPB4/TT780NN
      yxcPIMukdDacaY3kR7ElArKTvlNdGJQsSTG/qVOz8zS2ddNjt5Dali4wHV3m4eg0JOLcvp3E
      Ud3MwdatOmw2HWM1FCUYioDeSGtbJ07rtvvIMorezIHDxzEbBVLpfA9Id10nX3vLRVbRU1Oj
      kU5QEWg70IvNYsprK0YrB/vPIEynyETn0Ok0Tj6X9cREmVYhTVaGPAdtnYBFSpAydhCPR4H8
      CDIFHYFoiqMtEnER8pKaCGCUs+RsTaQiK0D+GcrJ1UWy1mpOnT2ALGaQyNfJZxaWNJ83sjLD
      2EwAIklu3VymuvkArbVbW5KIR4lHQgQjCTBa6e5ox2zcJgBiDsHi4HB/M0ZBIqnibNvSdYT3
      3bVYXepRg2UTgKVgGFkHgbSGi7DVxvLoIGGvGZvNgc2S/1FYMjFG5lboqHXj2nbqvMVVw4mD
      Eh/dj9DfW8un96byBMBsc5OZmsBR00Gr34W66igxPnCZh0EZp93Hr7//Rl6J0OxDPh+J0d7g
      xWx343NsGtFyKR4Nj5DJycA8mF309ahEssUD3B+dp9VlYmR6iQZvfpmZpRAm0oQjCtWiDOZt
      7yQTJZ6ViEeiiNuvfUEguIqsiMRiUXQeEVzbPl4pw2osSUqJk8uoH1+k0+uZG5mkyqbD7nBh
      Mebr9kpslemlIHUeJx7X1pnI7W/mhDHNR+P19LXluDIbyhMAp8vD+MMHtBx/Ba9F6zPN8vjq
      hwxHjbS0d/OV88fySow/uM58ykpjox6XfevgtDI3Xj4VqLrKC5JIU1s3bocNQdi2BpAVBP2a
      T7jBZMNmyR9lBKMRKZMiI8q4HA70um1fsMFMeH6C1UgUV3UT1Z5dqARSmomZRSzuWkxClq6O
      trwqMvEQyxGRap8Tu9O9tQ69EX9NLYKYQlJ06I0Wqr2u/Onc4sKmg4bWFmqqvVhN+Z1eW+1B
      lhU8NS3UVbnzBdZox+WwIaDQ3d2FzZxfh8ftwWrQoXfU0N5YzfZXht6I1+MCKUNbVy9O25ow
      b1GBABRpLY+pzZX/zgCdQUcukyEjgtelknreaGN54jHBWIqG5jbctny1sajKlwkzGYhhtXkx
      mU20N+WHVsYCiyQFK163C7djqwDYXd7yzQCpeJRUOoMxqxVUITI2eJdITkfXifNUufNVi/hq
      gFsDD7Fa3Phr6zBufxoxR33nIfweB3qD+ohoc3io9kbR6U3YrSrmNYOd0+deJ5NJoejUk2c5
      a9rotyYRBAGzymgIYHd50FtEbtwepKdD5WTDTIK5pSVGhx/g6jzN6QP5uXLEVIxEKgtGrcAa
      hdXVEFIOREndx1HKJkmk0uhEbTNhLBIml0mTEdXrELMp7g/cQZEUDr/dgNuW/97Ci7PcGl/C
      aPHS3qRiPs1laOk9Tq3bjE7DZOly+3C7JcxmOya1/rP6eeXsBdLJOAaLenqVhq7DOJNZ9Cb1
      viubGfT+8Ax9J04wO/4Q8oxqQHyRmN5Na0sDsYR6VNDEwio11X5qq21fqBjb0MGD27cJRaMk
      kup1jI+NrQmJMczY0jbdPDLNX3/7e1y7cYux8SnmV0KqdWTja8cKff7RD3i0pHEA9dwEw8PD
      SHqNHKJGGwcOHODowTZSafW23ro3St/JfqToNKsJlQi1xBLTcSvHDrYy9Pix+vOOjlHb3qP+
      vGsPw8hCkmP9Jxl/pH6AeCK8jGRy0dtVy3JYva0LwTD+mgbsFg1nY53C4I2bhCJRUmn1aLtb
      g2P0azxveOYB3/ruj7hx6y6T07Msr6ofuB4PLTM09IjLQ+rRiU9fBcolefDwAbFIlNVIlIxi
      3LDebFGBLC5qfV5MBj0tTQ2qKkGV202V34vB4qW2yp1/RJOsEA/NMzQySUqw0uDPXwiJyQij
      k7NEozGiKZG6mqovp1qLm/bGKgx6PZlsFpPVQbVX5XxeWSQjKriMIml7I42eTR+5lGVxaQnB
      aMPrq+bwoYMYt0/lAGKamfklUpKRro7mrWqFlGP08UPCoQiBSJRERqapqQnzJnNoOrrMveEp
      YqtBVoJBrJ4aGvxbg9tnRh+wEAgTCoWJJTPUNrbg3Ly2ykS5fX+YRDRMOBpBMTpoaVgbvTf3
      jcnmot7vIydY6Gipw6TPXzz5fNX43Fbc3lo8Lnu+CiQrrCxMMD45g2Dz4VdRT3ORZcbmlolF
      o0TT0Fj75VFXZlc1jX4XRoOeZDqDzenB68zXEmQxh6gIRCULXfVb+z8eDpRhBjDaOHz0OM31
      Pox6HVVa+S4zCR6PDDP6+AGj86uqRaKhBR4/HuPunbsksyozQC7C6soKGZOXdFL9gIS6jsOc
      OdKJyVFF/5EDefqsIolEYjFkGex2jVMgjRaqqqqo6T5Jf8s2ARF0mEymtUzEgsinlz5Xj08V
      V7n/cIql6WF+8r3vMRXeNOLpjXQdOkpHWz0mvQ6Xx4dpm0ZgcdVw4vhR7GYTXrddVa1o7jpM
      T2cLFpMeq7MKu2nbR2l2ceL4MWr9bvQ67b7JJcIMjYwyfO8msxozwMrCBKNjE1y/Pah6ndQy
      M8txTGYr8az6DNDZd4be1locvgb6ezu2CJEASNkM4XgSAR02q3rSAqPFTlVVFecP5lvE9AZj
      +dYA4UiStqPHMes1mvCFSiBHHQzF1V+yp6aRA04/OuUBWVECtnW63oSjthkplEAQ8rMYDw98
      Tjirx5oLEHWfxLnd2hCd4adXh+npaEAnqJ/gsjI3ztzK2vSbjkXpOPkqNbZN7dAZ8FV9mZy3
      ZlldmJEV3LUtHGuWUYZGmV6K0+rZOoKvBiI09B7DpterzyLZOGmDk8a6au5Mqqtr8WgUt7+J
      Oq8N23YpAkAilpA4dPQgRqN6/laT3cOBAweQvDAaTUNN/sdX29iOyy8RSd5Tf16ThRp/DXo5
      na8BS1kG7twipxjIJFZxd57DZNj6vJG5x1wbCtLeUIUgQCaTvy6aHX9EILrWZyavn97WrakW
      rQ53+QQgl00Ri0TJmCw47SqHQkg5gsEgimKhr1s9S9nC3DQ5xUhNUzfebQsxMR1nMRCnrq6B
      mhoZqzN/NPPW1CMFV0mlFaLBZUS5mi0TgKuZX/+lfDv4ZvyNHfi/eK/ZhfvcXohR06mdqe74
      sXxTHQCOZo60TBGVdBw/eRa9Pb8OScoQjUQRTSZsNis6to3gVj/H2tOsRNP09aqnFpelLLFY
      DJtBxmS2kbe2lBUy2RTRaBSz1YHDpnKySi691jeCnxNt6unRZ6cnwWjjUG9+Zud0PEwgLNLV
      tRbj7Nw+0wg6auoaCAYCJEWR1WAQudHJZk3L3XSI91VsCZtp6jjEepFrY+rJjcsmAHImyeLy
      Mhari8ZalZPNc2GGJ5boavWTSmVxb98tBHSZJKa6w7T78/XHdHSFwcEhnNVNHGirw6RiqvPX
      t+Cvb0HM9tAciSGKEkatGWkHGPwHOCnsMlNZOsL49DypSGDNCuTL16t1Yoal5WXsFivV1VX5
      H28yyGLayNHmKu5PzOI5mH96piCLBIPLCDknTk81lu2zgADZRHTtPm6Fuup8QUxGlplZDNNY
      4yKVzmF15PeNlE7ja+mlzpW/6A+vzHH/8TRVDV201nvyZzOdgfqmVuqbWsmmEoTjKWRZyTdz
      PwEnNQT1qcYEb0bMpkhkFUz6tawOgiBsjTtNzfPh58uc6mvFbHWo7gMsz4wyOr2IyVnFkUNb
      9feNA+VC81y79ZCqlh6OHyw8mpcVKUsgFEWOzjMUd/H6sba8IrKYJZLIYjPrMZotWxf9Uo7x
      watcHk9yuMWH3lVH34H8Q/AUSSQcS2K3GNGZLFv8fdYKKGTSCXIY0aNg/UK33tw34flhhpbg
      YJsfq0N9H2BmZJCZlRhmdw0nejvznBgBgnMjDDyaoqnnBAebVQbBp0DZZoB71z5hRvbh1We4
      8MXZV1sweGhvShIKhXDrzKoCIKYSmBwepGwGYZunYS4ZZmxyloysp6P7EA1NhY8oKjsbKp+Z
      w+3quTIfDdzm4VKMQ7UOGnpO47Nv6j69kY6ubiZzUY4fbeDe+JJqHbPjD/nprQm+dryeVNUx
      uvzbVBwpzZ1LPyPs6cWWXub1C/l9Y/fU4k8FCIVC6MwOVQHIptLYHA7Sufx9nkR4menZBUS9
      la5DR2ms3/9UjFqUbR9AJyjEQ4usJrQyoYmM37/LrVt3mQ6o23inFyIcOXYYuy5JNLnVkiBl
      UyQyEiaDQDoVYylQ+MC1cpNKJYiFggyPTZDLqb8TvaCQToSYW4lhUDE9YnYgheYYHR0hqZHI
      TicISLkkY1Mr+eoPgCAgoBBenCSWUx8fxWyK+3dvc+/mTZaT6m1dDKXoPXaUdDRfELOpBGlJ
      j1GQScZCBCLqx74+Dco2A3T1vUq3Xk9OUk9rt7ERVu/M3wiTcowOD2G0W7l/+w46kxfXNic2
      q7eBU979TfG9V0zfv8q9FR3nelsIycvU+dQTxjrrWvmNnmNEohHyN5wVcoqBE/1HyGGkW0V3
      B7A5Pbx17iw1DQ241Ha+dSZ6X3mXwzodsqLeN+sbYUcaLSyHM3RXb5pFckkeDA1jtlkZvHUH
      d3X+StXX0IHvGemass0At2/dwmSzcfu2+m4jnnbePNtPrd/P0Y5tKsEXdvG2eh+BhIjXDKKG
      HD0PtBw5yzunulldDUMqzPxq/p5FMhLgypUrzC8uMjw8muemkIkFuHl7kMBqiJW5cYamllXv
      5a1posoOt65dYSWmYl4Wk9waGMJqt3HzlnrfeBq6efNsP0Z3E30t21yMv9jnqXcbiSkWTIp2
      bs9ngbLNAD0dDQzevUtVfb7XY3RljvG5FQDEbBZLlfpROY9G59ApMtFIBmemE/senDtWHgSs
      Th/dh3x09cjIcr5dwmR1cPhwLya9nqMnzuDeNuNFA/PYars42O5DToX4ZGCSQ235PjjRwBzT
      gQx9J07iUbHeYLDRVmPh/sBt6tsO5V3evO+RSWWpbsm3NAGMTc6SczawGAvT25tfz7NC2WaA
      5bkpJoIZoiv5PhrO6gb6+vro6+vjeHctw1MLqnWc7u/BajSAvQGvY/+OMH2aCIL6eWUGkwUp
      vEQ4p3DnxjXi2a26t7e+ndTsfe7eu8fnNwdpa1f/MI1GI2I2xcT4BGqb5Gn86AAAAslJREFU
      58g5VmbGmM3YCczmZ3eubmjf6Jv+NgsDE+obbv3Hj2GVk9S1FD7qtNyUzxs0K0IuRkTOb8Jm
      k5nOUceJA9sWfLkEA6OL9DWa8LYc40hzaQfYPS9ksjJ2nQK5BKNTCxzvbvwy8bDFxdkLryNJ
      UsHzzKYmJqhrPwZLA0ytpOip3+beoUjkZMjGgsRVhsfN9ep9nZyo2raJmVxhYF6kzSHR0nOC
      lqr9PWmmVMomAMfPvkFjMIzV5YXtO5qb0BnN2LcP7rJIMByFahPL0Rfj4IqdcOTUGZJZkdpT
      5xD06upesVNmWtvbeTD2GAQbh7tVduANVk6++jaBcAyX11+wLr3ZTt7nLaYJRrPUCxGipioo
      j3l/x5RBABSmHw+yKhox5JKYZBMexxOOEkY7XXUOHgVE6nUBHo3E6WxvzfMXedGYGx/i6liQ
      vmY3Tb2nnzir8sLUCKvxLBazkUw2q7KLK/N44DY5kwMxEUEyuTcCYnaMzU+rc4pg1oo+O8ej
      sQg9HU1lz+CtxdMXgHSA4RWFd17tQUDm4s8v0d30OoVmgTx0Blrau/etic8qsWQWsy7LajSp
      EqlbnJrGdjypGBPj44iYMW23pcZnmEm5ebevG5QcFz+5RsubF57sJgYLnd3Ptt6/macvAKJE
      LhdnaGgIgJjqSqzCdiRJ4mj/STzTUxhcNbg142S1mRl7QCCpo72zh0NOlUP/sjkSqTCPHj0C
      IKO82DMqlMMXSCWpEpDvC1ThS6QUl64McOpEGx9fGcVpljl25lVcKokCCrE4M0Yo/oXbsM5A
      c2s7js2CpNI360LyovbN058BBOFJlJ0KAAoIiNy7fpee0+8QGf6cnEbMbyHqmjspeCLvS9g3
      L/Q5wS8MBgsnT/aRyCj43AaSh/qw2CpdtxdU3uJzgYDF5sTyhbHM7lTPgFDhyXnxVzkVKhSg
      IgAVXmr+f+Kn0Aq0FPxeAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Sheet 12' width='192'>
      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
      vRM/AV2YbLoVWsRkAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Sheet 13' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 14' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 15' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
